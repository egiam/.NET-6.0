 
Clase 7
1) ¿Cuál es el primer elemento de una matriz 0 o 1? 
2) ¿Cual es la diferencia entre un acumulador y un contador?

Clase 8
1. Diferencia entre vector y matriz?
2. como se recorre un array de dos dimensiones?

Clase 9
1. Nombre de la clase para obtener datos aleatorios
2. donde se coloca el tipo de dato para las listas

Clase 10
1. Que Significan el Count y la Capacity en una lista?
2. Que son las estructuras de dato LIFO y FIFO, y dar un ejemplo de cada una.

Pilas: Estructura donde el ultimo en entrar es el primero en salir. new Stack<int>();
Colas: Similar a pila, pero el primero en entrar es el primero en salir. new Queue<int>();

Clase 11
1. Cuales son las tres estrucuras logicas que plantea el teorema de la programacion estructurada? --> De Secuencia, Seccion e Iteracion
2. Cual es la diferencia entre instancia y clase.
	Diferencia entre instancia y clase:
	La clase es el molde del objeto que quiero crear. 
	La instancia es el objeto creado a partir de una clase.

Paradigma: Forma de encarar un tema.
Objeto, Modelo (UML => Modelo grafico para representar objetos)
POO: reutiliacion de codigo.

Clase 12:
1. Como invocamos o llamamos a una funcion o metodo?
	GetInfo es un metodo o una funcion y lo otro son propiedades, para poder llamar un metodo o funcion si o si necesito usar parentesis.
2. Es posible tener dos funciones con el mismo nombre? Justifique.

DateTime:
	fecha = new DateTime(1986, 11, 4) //Anio, Mes, Dia
	fecha.ToString("yyyy MM dd ddd")
	fecha.ToString("dddd dd-MMM-yy HH:mm")

Clase 13:
1. Es necesario inicializar todos los atributos de la clase, en el metodo constructor?
	RTA: Solo aquellos a los que realmente quiero/voy a inicializar.
2. Que sucede si no defino un cuerpo para los metodos get y set para una propiedad?

Sobrecarga de metodos --> Definir un metodo con el mismo nombre, pero que esa funcion tenga un procesamiento distinto basado en sus parametros.

Un objeto se puede comportar de distintas maneras cuando tiene q realizar una funcion.
Constructor: Funcion que se ejecuta al momento de instanciarse la clase. Se llama exctamente igual que la clase.


Extra:
Crearemos una clase llamada Serie con las siguientes características:
Sus atributos son titulo, numero de temporadas, entregado, genero y creador.
Por defecto, el numero de temporadas es de 3 temporadas y entregado false.
El resto de atributos serán valores por defecto según el tipo del atributo.
Los constructores que se implementaran serán:
Un constructor por defecto.
Un constructor con el titulo y creador. 
El resto por defecto.
Un constructor con todos los atributos, excepto de entregado.
Los métodos que se implementara serán:
Métodos get de todos los atributos, excepto de entregado.
Métodos set de todos los atributos, excepto de entregado.
Sobrescribe los métodos toString.


Crearemos una clase Videojuego con las siguientes características:
Sus atributos son titulo, horas estimadas, entregado, genero y compañia.
Por defecto, las horas estimadas serán de 10 horas y entregado false. 
El resto de atributos serán valores por defecto según el tipo del atributo.
Los constructores que se implementaran serán:
Un constructor por defecto.
Un constructor con el titulo y horas estimadas. 
El resto por defecto.
Un constructor con todos los atributos, excepto de entregado.
Los métodos que se implementara serán:
Métodos get de todos los atributos, excepto de entregado.
Métodos set de todos los atributos, excepto de entregado.
Sobrescribe los métodos toString.

Como vemos, en principio, las clases anteriores no son padre-hija, pero si tienen en común, por eso vamos a hacer una interfaz llamada Entregable con los siguientes métodos:
entregar(): cambia el atributo prestado a true.
devolver(): cambia el atributo prestado a false.
isEntregado(): devuelve el estado del atributo prestado.
Método compareTo (Object a), compara las horas estimadas en los videojuegos y en las series el numero de temporadas. 
Como parámetro que tenga un objeto, no es necesario que implementes la interfaz Comparable. 
Recuerda el uso de los casting de objetos.
Implementa los anteriores métodos en las clases Videojuego y Serie. 
Ahora crea una aplicación ejecutable y realiza lo siguiente:
Crea dos arrays, uno de Series y otro de Videojuegos, de 5 posiciones cada uno.
Crea un objeto en cada posición del array, con los valores que desees, puedes usar distintos constructores.
Entrega algunos Videojuegos y Series con el método entregar().
Cuenta cuantos Series y Videojuegos hay entregados. 
Al contarlos, devuélvelos.
Por último, indica el Videojuego tiene más horas estimadas y la serie con mas temporadas. 
Muestralos en pantalla con toda su información (usa el método toString()).


